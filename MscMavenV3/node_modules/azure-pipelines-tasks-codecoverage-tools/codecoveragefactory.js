"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodeCoverageEnablerFactory = void 0;
const jacoco_ant_ccenabler_1 = require("./jacoco/jacoco.ant.ccenabler");
const jacoco_gradle_ccenabler_1 = require("./jacoco/jacoco.gradle.ccenabler");
const jacoco_maven_ccenabler_1 = require("./jacoco/jacoco.maven.ccenabler");
const cobertura_ant_ccenabler_1 = require("./cobertura/cobertura.ant.ccenabler");
const cobertura_maven_ccenabler_1 = require("./cobertura/cobertura.maven.ccenabler");
const cobertura_gradle_ccenabler_1 = require("./cobertura/cobertura.gradle.ccenabler");
class CodeCoverageEnablerFactory {
    getTool(buildTool, ccTool) {
        if (!buildTool || !ccTool) {
            throw new Error("Invalid build tool/code coverage tool");
        }
        switch (buildTool.toLowerCase() + "-" + ccTool.toLowerCase()) {
            case "ant-jacoco":
                return new jacoco_ant_ccenabler_1.JacocoAntCodeCoverageEnabler();
            case "ant-cobertura":
                return new cobertura_ant_ccenabler_1.CoberturaAntCodeCoverageEnabler();
            case "maven-jacoco":
                return new jacoco_maven_ccenabler_1.JacocoMavenCodeCoverageEnabler();
            case "maven-cobertura":
                return new cobertura_maven_ccenabler_1.CoberturaMavenCodeCoverageEnabler();
            case "gradle-jacoco":
                return new jacoco_gradle_ccenabler_1.JacocoGradleCodeCoverageEnabler();
            case "gradle-cobertura":
                return new cobertura_gradle_ccenabler_1.CoberturaGradleCodeCoverageEnabler();
            default:
                throw new Error("Invalid build tool/code coverage tool");
        }
    }
}
exports.CodeCoverageEnablerFactory = CodeCoverageEnablerFactory;
