"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoberturaGradleCodeCoverageEnabler = void 0;
const util = require("../utilities");
const tl = require("azure-pipelines-task-lib/task");
const ccc = require("../codecoverageconstants");
const cc = require("../codecoverageenabler");
const Q = require("q");
class CoberturaGradleCodeCoverageEnabler extends cc.CoberturaCodeCoverageEnabler {
    // -----------------------------------------------------
    // Enable code coverage for Cobertura Gradle Builds
    // - enableCodeCoverage: CodeCoverageProperties  - ccProps
    // -----------------------------------------------------
    enableCodeCoverage(ccProps) {
        let _this = this;
        tl.debug("Input parameters: " + JSON.stringify(ccProps));
        _this.buildFile = ccProps["buildfile"];
        let classFilter = ccProps["classfilter"];
        let isMultiModule = ccProps["ismultimodule"] && ccProps["ismultimodule"] === "true";
        let classFileDirs = ccProps["classfilesdirectories"];
        let reportDir = ccProps["reportdirectory"];
        let codeCoveragePluginData = null;
        let filter = _this.extractFilters(classFilter);
        let cobExclude = _this.applyFilterPattern(filter.excludeFilter);
        let cobInclude = _this.applyFilterPattern(filter.includeFilter);
        if (isMultiModule) {
            codeCoveragePluginData = ccc.coberturaGradleMultiModuleEnable(cobExclude.join(","), cobInclude.join(","), classFileDirs, null, reportDir);
        }
        else {
            codeCoveragePluginData = ccc.coberturaGradleSingleModuleEnable(cobExclude.join(","), cobInclude.join(","), classFileDirs, null, reportDir);
        }
        try {
            tl.debug("Code Coverage data will be appeneded to build file: " + _this.buildFile);
            util.insertTextToFileSync(_this.buildFile, ccc.coberturaGradleBuildScript, codeCoveragePluginData);
            tl.debug("Appended code coverage data");
        }
        catch (error) {
            return Q.reject(error);
        }
        return Q.resolve(true);
    }
    applyFilterPattern(filter) {
        let ccfilter = [];
        if (!util.isNullOrWhitespace(filter)) {
            util.trimToEmptyString(filter).split(":").forEach(exFilter => {
                if (exFilter) {
                    ccfilter.push(exFilter.endsWith("*") ? ("'.*" + util.trimEnd(exFilter, "*") + ".*'") : ("'.*" + exFilter + "'"));
                }
            });
        }
        tl.debug("Applying the filter pattern: " + filter + " op: " + ccfilter);
        return ccfilter;
    }
}
exports.CoberturaGradleCodeCoverageEnabler = CoberturaGradleCodeCoverageEnabler;
