"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JacocoCodeCoverageEnabler = exports.CoberturaCodeCoverageEnabler = exports.CodeCoverageEnabler = void 0;
const tl = require("azure-pipelines-task-lib/task");
const util = require("./utilities");
/* Code Coverage enabler for different type of build tools and code coverage tools*/
class CodeCoverageEnabler {
    // -----------------------------------------------------
    // Convert the Azure Pipelines specific filter to comma seperated specific filter pattern
    // - +:com.abc,-:com.xy -> com.abc,com.xy
    // -----------------------------------------------------    
    extractFilters(classFilter) {
        let includeFilter = "";
        let excludeFilter = "";
        tl.debug("Extracting Azure Pipelines filter: " + classFilter);
        if (util.isNullOrWhitespace(classFilter)) {
            return {
                includeFilter: includeFilter,
                excludeFilter: excludeFilter
            };
        }
        classFilter.split(",").forEach(inputFilter => {
            if (util.isNullOrWhitespace(inputFilter) || inputFilter.length < 2) {
                throw new Error("Invalid class filter " + inputFilter);
            }
            switch (inputFilter.charAt(0)) {
                case "+":
                    includeFilter += inputFilter.substr(1);
                    break;
                case "-":
                    excludeFilter += inputFilter.substr(1);
                    break;
                default:
                    throw new Error("Invalid class filter " + inputFilter);
            }
        });
        tl.debug("Include Filter pattern: " + includeFilter);
        tl.debug("Exclude Filter pattern: " + excludeFilter);
        return {
            includeFilter: includeFilter,
            excludeFilter: excludeFilter
        };
    }
}
exports.CodeCoverageEnabler = CodeCoverageEnabler;
class CoberturaCodeCoverageEnabler extends CodeCoverageEnabler {
}
exports.CoberturaCodeCoverageEnabler = CoberturaCodeCoverageEnabler;
class JacocoCodeCoverageEnabler extends CodeCoverageEnabler {
}
exports.JacocoCodeCoverageEnabler = JacocoCodeCoverageEnabler;
