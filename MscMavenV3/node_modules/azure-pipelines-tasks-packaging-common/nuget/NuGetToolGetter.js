"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cacheBundledNuGet = exports.getMSBuildVersion = exports.getMSBuildVersionString = exports.getNuGet = exports.NUGET_EXE_TOOL_PATH_ENV_VAR = exports.DEFAULT_NUGET_PATH_SUFFIX = exports.DEFAULT_NUGET_VERSION = exports.NUGET_VERSION_4_0_0_PATH_SUFFIX = exports.NUGET_VERSION_4_0_0 = exports.FORCE_NUGET_4_0_0 = void 0;
const toolLib = require("azure-pipelines-tool-lib/tool");
const taskLib = require("azure-pipelines-task-lib/task");
const restm = require("typed-rest-client/RestClient");
const path = require("path");
const semver = require("semver");
const commandHelper = require("./CommandHelper");
var NuGetReleaseStage;
(function (NuGetReleaseStage) {
    NuGetReleaseStage[NuGetReleaseStage["EarlyAccessPreview"] = 0] = "EarlyAccessPreview";
    NuGetReleaseStage[NuGetReleaseStage["Released"] = 1] = "Released";
    NuGetReleaseStage[NuGetReleaseStage["ReleasedAndBlessed"] = 2] = "ReleasedAndBlessed";
})(NuGetReleaseStage || (NuGetReleaseStage = {}));
const NUGET_TOOL_NAME = 'NuGet';
const NUGET_EXE_FILENAME = 'nuget.exe';
exports.FORCE_NUGET_4_0_0 = 'FORCE_NUGET_4_0_0';
exports.NUGET_VERSION_4_0_0 = '4.0.0';
exports.NUGET_VERSION_4_0_0_PATH_SUFFIX = 'NuGet/4.0.0/';
exports.DEFAULT_NUGET_VERSION = '4.1.0';
exports.DEFAULT_NUGET_PATH_SUFFIX = 'NuGet/4.1.0/';
exports.NUGET_EXE_TOOL_PATH_ENV_VAR = 'NuGetExeToolPath';
function getNuGet(versionSpec, checkLatest, addNuGetToPath) {
    return __awaiter(this, void 0, void 0, function* () {
        if (toolLib.isExplicitVersion(versionSpec)) {
            // Check latest doesn't make sense when explicit version
            checkLatest = false;
            taskLib.debug('Exact match expected on version: ' + versionSpec);
        }
        else {
            taskLib.debug('Query match expected on version: ' + versionSpec);
            console.log(taskLib.loc("Info_ExpectBehaviorChangeWhenUsingVersionQuery"));
        }
        // If we're not checking latest, check the cache first
        let toolPath;
        if (!checkLatest) {
            taskLib.debug('Trying to get tool from local cache');
            toolPath = toolLib.findLocalTool(NUGET_TOOL_NAME, versionSpec);
        }
        let localVersions = toolLib.findLocalToolVersions(NUGET_TOOL_NAME);
        let version = toolLib.evaluateVersions(localVersions, versionSpec);
        if (toolPath) {
            // If here, then we're not checking latest and we found the tool in cache
            console.log(taskLib.loc("Info_ResolvedToolFromCache", version));
        }
        else {
            let versionInfo = yield getLatestMatchVersionInfo(versionSpec);
            // There is a local version which matches the spec yet we found one on dist.nuget.org
            // which is different, so we're about to change the version which was used
            if (version && version !== versionInfo.version) {
                taskLib.warning(taskLib.loc("Warning_UpdatingNuGetVersion", versionInfo.version, version));
            }
            version = versionInfo.version;
            taskLib.debug('Found the following version from the list: ' + version);
            if (!versionInfo.url) {
                taskLib.error(taskLib.loc("Error_NoUrlWasFoundWhichMatches", version));
                throw new Error(taskLib.loc("Error_NuGetToolInstallerFailer", NUGET_TOOL_NAME));
            }
            toolPath = toolLib.findLocalTool(NUGET_TOOL_NAME, version);
            if (!toolPath) {
                taskLib.debug('Downloading version: ' + version);
                let downloadPath = yield toolLib.downloadTool(versionInfo.url);
                taskLib.debug('Caching file');
                toolLib.cacheFile(downloadPath, NUGET_EXE_FILENAME, NUGET_TOOL_NAME, version);
            }
        }
        console.log(taskLib.loc("Info_UsingVersion", version));
        toolPath = toolLib.findLocalTool(NUGET_TOOL_NAME, version);
        if (addNuGetToPath) {
            console.log(taskLib.loc("Info_UsingToolPath", toolPath));
            toolLib.prependPath(toolPath);
        }
        let fullNuGetPath = path.join(toolPath, NUGET_EXE_FILENAME);
        taskLib.setVariable(exports.NUGET_EXE_TOOL_PATH_ENV_VAR, fullNuGetPath);
        return fullNuGetPath;
    });
}
exports.getNuGet = getNuGet;
function pathExistsAsFile(path) {
    try {
        return taskLib.stats(path).isFile();
    }
    catch (error) {
        return false;
    }
}
// Based on code in Tasks\Common\MSBuildHelpers\msbuildhelpers.ts
function getMSBuildVersionString() {
    return __awaiter(this, void 0, void 0, function* () {
        const msbuild2019Path = 'C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/MSBuild/Current/Bin/msbuild.exe';
        let version;
        let path = taskLib.which('msbuild', false);
        // Hmmm... it's not on the path. Can we find it directly?
        if (!path && (taskLib.osType() === 'Windows_NT') && pathExistsAsFile(msbuild2019Path)) {
            taskLib.debug('Falling back to VS2019 install path');
            path = msbuild2019Path;
        }
        if (path) {
            taskLib.debug('Found msbuild.exe at: ' + path);
            const getVersionTool = taskLib.tool(path);
            getVersionTool.arg(['/version', '/nologo']);
            getVersionTool.on('stdout', (data) => {
                if (data) {
                    version = data.toString().trim();
                    taskLib.debug('Found msbuild version: ' + version);
                }
            });
            yield getVersionTool.exec();
            taskLib.debug('Finished running msbuild /version /nologo');
        }
        return version;
    });
}
exports.getMSBuildVersionString = getMSBuildVersionString;
function getMSBuildVersion() {
    return __awaiter(this, void 0, void 0, function* () {
        const version = yield getMSBuildVersionString();
        return semver.coerce(version);
    });
}
exports.getMSBuildVersion = getMSBuildVersion;
function cacheBundledNuGet(cachedVersionToUse, nugetPathSuffix) {
    return __awaiter(this, void 0, void 0, function* () {
        if (cachedVersionToUse == null) {
            // Attempt to match nuget.exe version with msbuild.exe version
            const msbuildSemVer = yield getMSBuildVersion();
            if (msbuildSemVer && semver.gte(msbuildSemVer, '16.8.0')) {
                taskLib.debug('Snapping to v5.8.0');
                cachedVersionToUse = '5.8.0';
                nugetPathSuffix = 'NuGet/5.8.0/';
            }
            else if (msbuildSemVer && semver.gte(msbuildSemVer, '16.5.0')) {
                taskLib.debug('Snapping to v5.4.0');
                cachedVersionToUse = '5.4.0';
                nugetPathSuffix = 'NuGet/5.4.0/';
            }
            else {
                cachedVersionToUse = exports.DEFAULT_NUGET_VERSION;
            }
        }
        if (nugetPathSuffix == null) {
            nugetPathSuffix = exports.DEFAULT_NUGET_PATH_SUFFIX;
        }
        if (taskLib.getVariable(exports.FORCE_NUGET_4_0_0) &&
            taskLib.getVariable(exports.FORCE_NUGET_4_0_0).toLowerCase() === "true") {
            cachedVersionToUse = exports.NUGET_VERSION_4_0_0;
            nugetPathSuffix = exports.NUGET_VERSION_4_0_0_PATH_SUFFIX;
        }
        if (!toolLib.findLocalTool(NUGET_TOOL_NAME, cachedVersionToUse)) {
            taskLib.debug(`Placing bundled NuGet.exe ${cachedVersionToUse} in tool lib cache`);
            let bundledNuGetLocation = getBundledNuGet_Location([nugetPathSuffix]);
            yield toolLib.cacheFile(bundledNuGetLocation, NUGET_EXE_FILENAME, NUGET_TOOL_NAME, cachedVersionToUse);
        }
        return cachedVersionToUse;
    });
}
exports.cacheBundledNuGet = cacheBundledNuGet;
function GetRestClientOptions() {
    let options = {};
    options.responseProcessor = (obj) => {
        return obj['nuget.exe'];
    };
    return options;
}
function getLatestMatchVersionInfo(versionSpec) {
    return __awaiter(this, void 0, void 0, function* () {
        taskLib.debug('Querying versions list');
        let versionsUrl = 'https://dist.nuget.org/tools.json';
        let proxyRequestOptions = {
            proxy: taskLib.getHttpProxyConfiguration(versionsUrl)
        };
        let rest = new restm.RestClient('vsts-tasks/NuGetToolInstaller', undefined, undefined, proxyRequestOptions);
        let nugetVersions = (yield rest.get(versionsUrl, GetRestClientOptions())).result;
        // x.stage is the string representation of the enum, NuGetReleaseStage.Value = number, NuGetReleaseStage[NuGetReleaseStage.Value] = string, NuGetReleaseStage[x.stage] = number
        let releasedVersions = nugetVersions.filter(x => x.stage.toString() !== NuGetReleaseStage[NuGetReleaseStage.EarlyAccessPreview]);
        let versionStringsFromDist = releasedVersions.map(x => x.version);
        let version = toolLib.evaluateVersions(versionStringsFromDist, versionSpec);
        if (!version) {
            taskLib.error(taskLib.loc("Error_NoVersionWasFoundWhichMatches", versionSpec));
            taskLib.error(taskLib.loc("Info_AvailableVersions", releasedVersions.map(x => x.version).join("; ")));
            throw new Error(taskLib.loc("Error_NuGetToolInstallerFailer", NUGET_TOOL_NAME));
        }
        return releasedVersions.find(x => x.version === version);
    });
}
function getBundledNuGet_Location(nugetPaths) {
    let taskNodeModulesPath = path.dirname(path.dirname(__dirname));
    let taskRootPath = path.dirname(taskNodeModulesPath);
    const toolPath = commandHelper.locateTool("NuGet", {
        root: taskRootPath,
        searchPath: nugetPaths,
        toolFilenames: ['NuGet.exe', 'nuget.exe'],
    });
    return toolPath;
}
