"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseTool = void 0;
const AnalysisResult_1 = require("./AnalysisResult");
const path = require("path");
const glob = require("glob");
const tl = require("azure-pipelines-task-lib/task");
/**
 * An abstract class that is the base for both configuring a build to use an analysis tool and
 * parsing reports
 *
 * @export
 * @class BaseTool
 * @implements {IAnalysisTool}
 */
class BaseTool {
    constructor(toolName, buildOutput, uiInputName) {
        this.toolName = toolName;
        this.buildOutput = buildOutput;
        this.uiInputName = uiInputName;
    }
    processResults() {
        if (!this.isEnabled()) {
            tl.debug(`[CA] ${this.toolName} analysis is not enabled.`);
            return [];
        }
        let results = [];
        let outputs = this.buildOutput.findModuleOutputs();
        tl.debug(`[CA] ${this.toolName} parser found ${outputs.length} possible modules to upload results from.`);
        for (let output of outputs) {
            let result = this.parseModuleOutput(output);
            if (result) {
                results.push(result);
            }
        }
        return results;
    }
    isEnabled() {
        return tl.getBoolInput(this.uiInputName, false);
    }
    findHtmlReport(xmlReport) {
        // expecting to find an html report with the same name
        let reportName = path.basename(xmlReport, '.xml');
        let dirName = path.dirname(xmlReport);
        let htmlReports = glob.sync(path.join(dirName, '**', reportName + '.html'));
        if (htmlReports.length > 0) {
            return htmlReports[0];
        }
        return null;
    }
    parseModuleOutput(output) {
        let reportDir = this.getBuildReportDir(output);
        let xmlReports = glob.sync(path.join(reportDir, '*.xml'));
        if (xmlReports.length === 0) {
            tl.debug(`[CA] No ${this.toolName} reports found for the ${output.moduleName} module. Searched in ${reportDir}`);
            return null;
        }
        tl.debug(`[CA] Found ${xmlReports.length} xml reports for module ${output.moduleName}`);
        return this.buildAnalysisResultFromModule(xmlReports, output.moduleName);
    }
    buildAnalysisResultFromModule(xmlReports, moduleName) {
        let fileCount = 0;
        let violationCount = 0;
        let artifacts = [];
        for (let xmlReport of xmlReports) {
            let result = this.parseXmlReport(xmlReport, moduleName);
            if (result && (result[0] !== 0)) {
                violationCount += result[0];
                fileCount += result[1];
                artifacts.push(xmlReport);
                let htmlReport = this.findHtmlReport(xmlReport);
                if (htmlReport) {
                    artifacts.push(htmlReport);
                }
            }
            else {
                tl.debug(`[CA] ${this.toolName} report for module ${moduleName} was empty and will be ignored.`);
            }
        }
        return new AnalysisResult_1.AnalysisResult(this, moduleName, artifacts, violationCount, fileCount);
    }
}
exports.BaseTool = BaseTool;
