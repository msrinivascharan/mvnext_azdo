"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuildOutput = exports.BuildEngine = void 0;
const ModuleOutput_1 = require("./ModuleOutput");
const path = require("path");
const fs = require("fs");
const glob = require("glob");
const tl = require("azure-pipelines-task-lib/task");
var BuildEngine;
(function (BuildEngine) {
    BuildEngine[BuildEngine["Maven"] = 0] = "Maven";
    BuildEngine[BuildEngine["Gradle"] = 1] = "Gradle";
})(BuildEngine = exports.BuildEngine || (exports.BuildEngine = {}));
/**
 * Build output from a single or multi module project. Identifies modules based on path conventions.
 *
 * @export
 * @class BuildOutput
 * @implements {IBuildOutput}
 */
class BuildOutput {
    constructor(rootDirectory, buildEngine) {
        this.rootDirectory = rootDirectory;
        this.buildEngine = buildEngine;
    }
    /**
     * Finds the module outputs by looking at the file structure. In Gradle the modules are in the "build"
     *
     * @returns {ModuleOutput[]}
     */
    findModuleOutputs() {
        let moduleOutputs = [];
        let modulePaths = glob.sync(path.join(this.rootDirectory, '**', this.getBuildDirectoryName()))
            .filter((dir) => fs.lstatSync(dir).isDirectory());
        for (let modulePath of modulePaths) {
            let moduleName = this.getModuleName(modulePath);
            let mo = new ModuleOutput_1.ModuleOutput(moduleName, modulePath);
            tl.debug(`[CA] Candidate module: ${mo.moduleName} - root ${mo.moduleRoot}`);
            moduleOutputs.push(mo);
        }
        return moduleOutputs;
    }
    getModuleName(modulePath) {
        let rootBuildDir = path.join(this.rootDirectory, this.getBuildDirectoryName());
        tl.debug(`[CA] modulePath: ${modulePath} rootBuildDir: ${rootBuildDir}`);
        if (path.normalize(modulePath) === path.normalize(rootBuildDir)) {
            return 'root';
        }
        return path.basename(path.join(modulePath, '..'));
    }
    getBuildDirectoryName() {
        switch (this.buildEngine) {
            case BuildEngine.Gradle:
                return 'build';
            case BuildEngine.Maven:
                return 'target';
            default:
                tl.debug(`Unknown build engine value.`);
                return null;
        }
    }
}
exports.BuildOutput = BuildOutput;
