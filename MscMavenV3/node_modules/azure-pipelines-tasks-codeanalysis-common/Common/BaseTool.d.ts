import { AnalysisResult } from './AnalysisResult';
import { IAnalysisTool } from './IAnalysisTool';
import { BuildOutput } from './BuildOutput';
import { ModuleOutput } from './ModuleOutput';
import { ToolRunner } from 'azure-pipelines-task-lib/toolrunner';
/**
 * An abstract class that is the base for both configuring a build to use an analysis tool and
 * parsing reports
 *
 * @export
 * @class BaseTool
 * @implements {IAnalysisTool}
 */
export declare abstract class BaseTool implements IAnalysisTool {
    toolName: string;
    protected buildOutput: BuildOutput;
    private uiInputName;
    constructor(toolName: string, buildOutput: BuildOutput, uiInputName: string);
    /**
     * This method lets implementers specify where the reports are located
     *
     * @protected
     * @abstract
     * @param {ModuleOutput} output
     */
    protected abstract getBuildReportDir(output: ModuleOutput): string;
    /**
     * Report parser that extracts the number of affected files and the number of violations from a report
     *
     * @protected
     * @abstract
     * @param {string} xmlReport
     * @param {string} moduleName
     * @returns {[number, number]} a tuple of [affected_file_count, violation_count]
     */
    protected abstract parseXmlReport(xmlReport: string, moduleName: string): [number, number];
    /**
     * Configures the provided ToolRunner instance with arguments which will invoke the tool represented by this class.
     * @param toolRunner
     * @returns {ToolRunner} ToolRunner instance with arguments applied
     */
    abstract configureBuild(toolRunner: ToolRunner): ToolRunner;
    processResults(): AnalysisResult[];
    isEnabled(): boolean;
    protected findHtmlReport(xmlReport: string): string;
    private parseModuleOutput;
    private buildAnalysisResultFromModule;
}
