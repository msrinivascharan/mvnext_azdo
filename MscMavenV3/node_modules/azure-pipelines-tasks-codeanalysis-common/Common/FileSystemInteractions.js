"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileSystemInteractions = void 0;
const shell = require("shelljs");
const path = require("path");
const fs = require("fs");
const tl = require("azure-pipelines-task-lib/task");
class FileSystemInteractions {
    /**
     * Copies a file from the source path to the destination path.
     * If the destination path already exists, it is replaced. Otherwise a new file is created.
     *
     * Adapted from: https://github.com/Microsoft/vsts-task-lib/blob/master/node/task.ts
     * @param sourcePath      Path to copy from
     * @param destinationPath Path to copy to
     */
    static copyFile(sourcePath, destinationPath) {
        shell.cp('-f', sourcePath, destinationPath);
        this.checkShell('cp', false);
    }
    /**
     * Create a directory at the specified path, including any folders in between.
     *
     * Copied from: https://github.com/Microsoft/vsts-task-lib/blob/master/node/task.ts
     * @param directoryPath Path to create
     */
    static createDirectory(directoryPath) {
        // build a stack of directories to create
        let stack = [];
        let testDir = directoryPath;
        while (true) {
            // validate the loop is not out of control
            if (stack.length >= 1000) {
                // let the framework throw
                fs.mkdirSync(directoryPath);
                return;
            }
            tl.debug(`testing directory '${testDir}'`);
            let stats;
            try {
                stats = fs.statSync(testDir);
            }
            catch (err) {
                if (err.code === 'ENOENT') {
                    // validate the directory is not the drive root
                    let parentDir = path.dirname(testDir);
                    if (testDir === parentDir) {
                        throw new Error(tl.loc('LIB_MkdirFailedInvalidDriveRoot', directoryPath, testDir)); // Unable to create directory '{p}'. Root directory does not exist: '{testDir}'
                    }
                    // push the dir and test the parent
                    stack.push(testDir);
                    testDir = parentDir;
                    continue;
                }
                else if (err.code === 'UNKNOWN') {
                    throw new Error(tl.loc('LIB_MkdirFailedInvalidShare', directoryPath, testDir)); // Unable to create directory '{p}'. Unable to verify the directory exists: '{testDir}'. If directory is a file share, please verify the share name is correct, the share is online, and the current process has permission to access the share.
                }
                else {
                    throw err;
                }
            }
            if (!stats.isDirectory()) {
                throw new Error(tl.loc('LIB_MkdirFailedFileExists', directoryPath, testDir)); // Unable to create directory '{p}'. Conflicting file exists: '{testDir}'
            }
            // testDir exists
            break;
        }
        // create each directory
        while (stack.length) {
            let dir = stack.pop();
            tl.debug(`mkdir '${dir}'`);
            try {
                fs.mkdirSync(dir);
            }
            catch (err) {
                throw new Error(tl.loc('LIB_MkdirFailed', directoryPath, err.message)); // Unable to create directory '{p}'. {err.message}
            }
        }
    }
    /**
     * Checks that no errors were produced by the previous command.
     *
     * Copied from: https://github.com/Microsoft/vsts-task-lib/blob/master/node/task.ts
     * @param cmd             Command issued
     * @param continueOnError Do not throw an exception if an error was produced
     */
    static checkShell(cmd, continueOnError) {
        let se = shell.error();
        if (se) {
            tl.debug(cmd + ' failed');
            if (!continueOnError) {
                throw new Error(se);
            }
        }
    }
}
exports.FileSystemInteractions = FileSystemInteractions;
